!**< def
!define ints123 (|1|
|2|
|3|
)
!define ints12c (|1|
|2|
|c|
)
!define testInts (!|fitlibrary.specify.arrayParser.Parse|

|''given ints''|${ints123}|
|1|
|2|
|3|

|''given ints''||

|''given ints''|${ints12c}|
|1|
|2|
|0|
)

!define inner1 (|1|
|2|
)
!define inner2 (|3|
|4|
)
!define outer (|${inner1}|
|${inner2}|
)
!define testIntsNested (!|fitlibrary.specify.arrayParser.Parse|

|''given ints2D''|${outer}|
|${inner1}|
|${inner2}|
)

!define strings (|1,2|
|3|
)
!define testString (!|fitlibrary.specify.arrayParser.Parse|

|''given strings''|${strings}|
|1,2|
|3|
)

**!
 * Primitive values are simple. An array of a suitable size is created. However, if one of the inputs is invalid, the corresponding element will be the default value for the type.
|!-fitlibrary.spec.SpecifyFixture-!|
|${testInts}|!-<table border="1" cellspacing="0">
<tr><td>fitlibrary.specify.arrayParser.Parse</td>
</tr>
</table>
<br><table border="1" cellspacing="0">
<tr><td><i>given ints</i></td>
<td><table border="1" cellspacing="0">
<tr><td>1</td>
</tr>
<tr><td>2</td>
</tr>
<tr><td>3</td>
</tr>
</table>
</td>
</tr>
<tr class="pass"><td colspan="2">1</td>
</tr>
<tr class="pass"><td colspan="2">2</td>
</tr>
<tr class="pass"><td colspan="2">3</td>
</tr>
</table>
<br><table border="1" cellspacing="0">
<tr><td class="pass"><i>given ints</i></td>
<td>&nbsp;</td>
</tr>
</table>
<br><table border="1" cellspacing="0">
<tr><td><i>given ints</i></td>
<td><table border="1" cellspacing="0">
<tr><td>1</td>
</tr>
<tr><td>2</td>
</tr>
<tr><td class="error">c<hr/> <span class="fit_label">Invalid Number</span></td>
</tr>
</table>
</td>
</tr>
<tr class="pass"><td colspan="2">1</td>
</tr>
<tr class="pass"><td colspan="2">2</td>
</tr>
<tr class="pass"><td colspan="2">0</td>
</tr>
</table>-!|
 * Nested arrays can be used
|!-fitlibrary.spec.SpecifyFixture-!|
|${testIntsNested}|!-<table border="1" cellspacing="0">
<tr><td>fitlibrary.specify.arrayParser.Parse</td>
</tr>
</table>
<br><table border="1" cellspacing="0">
<tr><td><i>given ints2D</i></td>
<td><table border="1" cellspacing="0">
<tr><td><table border="1" cellspacing="0">
<tr><td>1</td>
</tr>
<tr><td>2</td>
</tr>
</table>
</td>
</tr>
<tr><td><table border="1" cellspacing="0">
<tr><td>3</td>
</tr>
<tr><td>4</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr class="pass"><td colspan="2"><table border="1" cellspacing="0">
<tr class="pass"><td>1</td>
</tr>
<tr class="pass"><td>2</td>
</tr>
</table>
</td>
</tr>
<tr class="pass"><td colspan="2"><table border="1" cellspacing="0">
<tr class="pass"><td>3</td>
</tr>
<tr class="pass"><td>4</td>
</tr>
</table>
</td>
</tr>
</table>-!|
 * Strings can now contain ","
|!-fitlibrary.spec.SpecifyFixture-!|
|${testString}|!-<table border="1" cellspacing="0">
<tr><td>fitlibrary.specify.arrayParser.Parse</td>
</tr>
</table>
<br><table border="1" cellspacing="0">
<tr><td><i>given strings</i></td>
<td><table border="1" cellspacing="0">
<tr><td>1,2</td>
</tr>
<tr><td>3</td>
</tr>
</table>
</td>
</tr>
<tr class="pass"><td colspan="2">1,2</td>
</tr>
<tr class="pass"><td colspan="2">3</td>
</tr>
</table>
-!|

