!**< def
!define test {!|fitlibrary.specify.valueObject.ParseMyFixedPointAsStringWithSuperDelegate|

|'''check'''|a fixed point|(12,34)|(12,34)|

|'''check'''|a fixed point|(12,34)|(12,88)|

|'''check'''|a fixed point|(12,34)|(0,0)|

|''a fixed point as domain object''|(12,34)|
|x|12|
|y|34|
}
**!
!3 Delegate will handle subtypes
The delegate can also override the equals(Object,Object) and the show(Object) methods.

In the following, we choose to match fixed points purely on their x coordinate. And we show a fixed point in a different form.
|!-fitlibrary.spec.SpecifyFixture-!|
|${test}|!-<table border="1" cellspacing="0">
<tr><td>fitlibrary.specify.valueObject.ParseMyFixedPointAsStringWithSuperDelegate</td>
</tr>
</table>
<br/><table border="1" cellspacing="0">
<tr><td><b>check</b></td>
<td>a fixed point</td>
<td>(12,34)</td>
<td class="pass">(12,34)</td>
</tr>
</table>
<br/><table border="1" cellspacing="0">
<tr><td><b>check</b></td>
<td>a fixed point</td>
<td>(12,34)</td>
<td class="pass">(12,88)</td>
</tr>
</table>
<br/><table border="1" cellspacing="0">
<tr><td><b>check</b></td>
<td>a fixed point</td>
<td>(12,34)</td>
<td class="fail">(0,0) <span class="fit_label">expected</span><hr>(12,34) <span class="fit_label">actual</span></td>
</tr>
</table>
<br/><table border="1" cellspacing="0">
<tr><td><i>a fixed point as domain object</i></td>
<td>(12,34)</td>
</tr>
<tr><td>x</td>
<td class="pass">12</td>
</tr>
<tr><td>y</td>
<td class="pass">34</td>
</tr>
</table>-!|
